import pandas as pd
import joblib
from pythainlp.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# 1Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• KPI
file_path ="TrianModel.xlsx"  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå standardized_kpi ‡πÅ‡∏•‡∏∞ category
sheets = pd.read_excel(file_path, sheet_name=None) 

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å Sheet
df_list = []
for sheet_name, df in sheets.items():
    # print(f"üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {sheet_name} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(df)} ‡πÅ‡∏ñ‡∏ß)")
    df_list.append(df)

df = pd.concat(df_list, ignore_index=True)
# print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ {len(df)} ‡πÅ‡∏ñ‡∏ß")

# 2Ô∏è‚É£ ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def preprocess_text(text):
    words = word_tokenize(str(text), keep_whitespace=False)  # ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥
    return " ".join(words)

df["processed_kpi"] = df["KPI"].apply(preprocess_text)

# 3Ô∏è‚É£ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (TF-IDF)
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df["processed_kpi"])
y = df["KPI Category"]

# 4Ô∏è‚É£ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Train/Test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# from imblearn.over_sampling import SMOTE

# smote = SMOTE(random_state=42)
# X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

# 5Ô∏è‚É£ ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Na√Øve Bayes
# model = MultinomialNB()
# model.fit(X_train, y_train)
# model.fit(X_resampled, y_resampled)


from sklearn.ensemble import RandomForestClassifier

# # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Na√Øve Bayes ‡πÄ‡∏õ‡πá‡∏ô Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# model.fit(X_resampled, y_resampled)


# 6Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"‚úÖ Model Accuracy: {accuracy:.2f}")

# 7Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• & Vectorizer
joblib.dump(model, "kpi_model.pkl")
joblib.dump(vectorizer, "tfidf_vectorizer.pkl")
print("‚úÖ Model saved successfully!")

print("üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô KPI ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:")
print(df["KPI Category"].value_counts())

test_kpi = ["Cost Saving Cost Saving and cost reduction per year", "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏ó‡∏µ‡πà ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏Å‡∏±‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö ISO ‡∏Ç‡∏≠‡∏á ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ Supplier ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ ‡∏Ç‡∏≠‡∏á ‡∏ó‡∏∏‡∏Å ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡∏õ‡∏µ ‡∏Ç‡∏≠‡∏á ‡∏ó‡∏∏‡∏Å ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ó‡∏µ‡πà ‡∏°‡∏µ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ ‡∏ñ‡∏π‡∏Å ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏ó‡∏µ‡πà ‡∏°‡∏µ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞ ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£"]
for kpi in test_kpi:
    processed_text = preprocess_text(kpi)
    vectorized_text = vectorizer.transform([processed_text])
    predicted_category = model.predict(vectorized_text)[0]
    print(f"KPI: {kpi} ‚Üí Predicted Category: {predicted_category}")


